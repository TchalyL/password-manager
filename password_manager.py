import sys, os
from cryptography.fernet import Fernet
from random_password_generator import generate_password




# VIEW ALL ACCOUNTS AND PASSWORDS
def view():
    data = list()
    with open(path, 'r') as f:
        for line in f.readlines():
            data.append(line.rstrip())

    print("------------- Passwords ------------")
    if len(data) == 0:
        print("NONE")
    else:
        for i in data:
            user, passw = i.split('|')
            # Decrypts the password before displaying it
            print(f"User: {user} | Password: {fer.decrypt(passw.encode()).decode()}")
    print("------------------------------------")


# ADD NEW ACCOUNT AND PASSWORD
def add(pwd_length=None):
    if pwd_length == None:
        name = input("Account Name: ")
        pwd = input("Password: ")
    else:
        name = input("Account Name: ")
        pwd = generate_password(pwd_length)
        print("Random password generated.\n")

    with open(path, 'a') as f:
        # Encrypts the password before storing it
        f.write(name + '|' + fer.encrypt(pwd.encode()).decode() + "\n")


# GENERATE RANDOM KEY
def write_key(path):
    key = Fernet.generate_key() # create random key

    # Open file in wb (write in byte) mode
    with open(path, 'wb') as key_file:
        # Write in key that was generated by Fernet
        key_file.write(key)
    print("Random key generated\n")


# LOAD KEY
def load_key(path):
    with open(path, 'rb') as file:
        key = file.read()

    return key


if __name__ == '__main__':
    path = 'passwords.txt' # path to save passwords to

    # Check to see if key exists
    if not(os.path.isfile("key.key")):
        print("Missing key!")
        res = input("Would you like to generate a new random key? (y/n/e[exit]): ")
        if res == 'e':
                sys.exit("Thank you for using this program.")

        while res != 'y':
            print("Sorry, you need a key to use this program.")
            res = input("Would you like to generate a new random key? (y/n/e[exit]): ")
            if res == 'e':
                sys.exit("Thank you for using this program.")  
                
        # Creates a new random key once the user hits y
        write_key("key.key")
    else:
        pass
     
    # master_pwd = input("Please enter master password: ")
    key = load_key("key.key") # + master_pwd.encode()  # concatenates the encoded master password (converted to bytes) to the end of the key
    fer = Fernet(key)  # initializing encryption module


    while True:
        mode = int(input("View existing passwords [1]\n"
        "Add a new password [2]\n"
        "Add a new random password [3]\n"
        "Close program [4]\n"
        "Input: "))
        if mode == 4:
            break

        if mode == 1:
            view()
        elif mode == 2:
            add()
        elif mode == 3:
            pwd_length = int(input("Password Length (characters): "))
            add(pwd_length)
        else:
            print("Invalid Mode")
            continue
